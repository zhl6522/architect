
当架构师创建软件系统的架构时，应该关注什么？
	软件架构师的首要关注点不是系统的功能；
	
	架构需要满足的品质：品质关注点指明了功能必须以何种方式交付，才能被系统的利益相关人员所接受，系统的结果包含这些人的既定利益。利益相关人有一些关注点，架构师必须重视（排序优先级，用户数是否比响应时间更重要）。这个例子突出了成功架构师的两项关键实践：让利益相关人参与以及同时关注功能和品质。作为一名架构师，你首先问我们想从系统中得到什么，有怎样的优先级。在实际项目中，你会找出其他的利益相关人。典型的利益相关人员和他们的关注点包括：
		投资人，他们想知道项目是否能够在给定的资源和进度约束下完成。
		架构师、开发人员和测试人员，他们首先考虑的是最初的构建和以后的维护与演进。
		项目经理，他们需要组织团队，制定迭代计划。
		市场人员，他们想通过品质特点实现与竞争者的差异化。
		用户、包括最终用户、系统管理员、以及安装、部署、准备、配置人员。
		技术支持人员，他们关注帮助平台电话呼入的数目和复杂性。
	每个系统都有自己的品质关注点。有些关注点可能定义的很好，如性能、安全、可伸缩性等。但是、另一些同样重要的关注点却可能没有详细规定，如可变性、可维护性和可用性等。利益相关人希望把功能放到软件上，而不是硬件上，这主要是为了很容易、很快地修改，然后通常在品质关注方面又对可变性轻描淡写。这很奇怪，不是吗？哪些改变能够迅速、容易地实现，哪些改变需要花费时间并且很难实现，架构决定将对此产生重要影响。所以，架构师难道不应该在理解功能需求的同时，也理解例疑似相关人在"可变性"这样的品质方面的期望吗？
	当架构师理解了利益相关人的品质关注点之后，接下来该做写什么？考虑折中。例如，对信息加密将加强安全性，但会损失性能。利用配置文件将增加可变性，但会降低可用性，除非我们能够验证配置是有效的。我们是否应该对这些文件使用标准的表示方式，如XML，还是使用自己发明的格式？创建系统的架构涉及许多这样的艰难折中。
		功能性
			产品向它的用户提供哪些功能？
		可变性
			软件将来可能需要哪些改变？哪些改变不太可能发生，不需要特别容易进行这些改变？
		性能
			产品将达到怎样的性能？
		容量
			多少用户将并发使用该系统？该系统将为用户保存多少数据？
		生态系统
			在部署的生态环境中，该系统将与其他系统进行哪些交互？
		模块化
			如何将编写软件的任务分解为工作指派（模块），特别是这些模块可以独立地开发，并能够准确而容易地满足彼此的需要？
		可构建性
			如何将软件构建为一组组件，并能够独立实现和验证这些组件？哪些组件应该复用？其他的产品，哪些应该从外部供应商处获得？
		产品化
			如果产品将以几种变体的形式存在，如何开发一个产品线，并利用这些变体的共性？产品线中的产品以怎样的步骤开发？在创建一条软件产品线时，要进行哪些投资？开发产品线中不同变体的选择，预期会得到怎样的回报？
		安全性
			产品是否需要用户认证，或者必须限制对数据的访问？数据的安全性如何得到保证？如何抵挡"拒绝服务"攻击或其他攻击？
	最后，一个好的架构师会认识到，架构会影响组织机构。Conway指出，系统的结构会反映构建它的组织机构的结构。架构师可能会认识到，Conway法则可以反过来应用。换言之，一个好的架构可能对组织机构产生影响，让组织机构发生改变，从而更有效地从该架构构建出系统。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
